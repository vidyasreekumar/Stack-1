// Time Complexity : O(n)
// Space Complexity : O(n)

// Keep adding indexes into the stack as long as the top of the stack is grteater than the incoming element
// When top of stack is lesser, pop from stack and update value in result array for that element
// Return the result array

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        Stack<Integer> st = new Stack<>();
        int[] result = new int[temperatures.length];
        for(int i = 0; i < temperatures.length; i++) {
            while(!st.isEmpty() && temperatures[st.peek()] < temperatures[i]) {
                result[st.peek()] = i - st.pop();
            }
            st.push(i);
        }
        return result;
    }
}